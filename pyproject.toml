[tool.poetry]
authors = ["Hoyeong Heo <hotohoto82@gmail.com>"]
description = ""
name = "mini-dalle2"
packages = [
  {include = "minidalle2", from = "src"},
]
readme = "README.md"
version = "0.1.3"

[tool.poetry.dependencies]
click = "^8.1.3"
dalle2-pytorch = "^0.6.16"
mlflow = "^1.26.1"
poethepoet = "^0.13.1"
pandas = "<1.4"
Pillow = "^9.1.1"
pyngrok = "^5.1.0"
python = ">=3.7,<3.8"
torch = "^1.11.0"
torchvision = "^0.12.0"
fastapi = "^0.78.0"
uvicorn = "^0.17.6"
SQLAlchemy = "^1.4.37"
tqdm = "^4.64.0"

[tool.poetry.dev-dependencies]
black = "^22.3.0"
coverage = "^6.4.1"
flake8 = "^4.0.1"
isort = "^5.10.1"
jupyter = "^1.0.0"
matplotlib = "^3.5.2"
pytest = "^7.1.2"
pytest-cov = "^3.0.0"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

[tool.poe.env]
IMAGE_TAG_VERSION="0.1.3"

[tool.poe.tasks]
docker_build_cpu = "docker build --progress=plain --build-arg OPT_PIP_EXTRA_INDEX_PYTORCH='--extra-index-url https://download.pytorch.org/whl/cpu' -t hotohoto/minidalle2:${IMAGE_TAG_VERSION}-cpu ."
docker_build_gpu = "docker build --progress=plain -t hotohoto/minidalle2:${IMAGE_TAG_VERSION}-gpu ."
docker_push_cpu = "docker image push hotohoto/minidalle2:${IMAGE_TAG_VERSION}-cpu"
docker_push_gpu = "docker image push hotohoto/minidalle2:${IMAGE_TAG_VERSION}-gpu"
download_annotations = "bin/download_annotations.sh"
download_images = {script="minidalle2.server.commands.download_images_command:execute"}
format = "sh -c 'black . && isort src tests'"
import_annotations = {script="minidalle2.server.commands.import_annotations_command:execute"}
infer = {script="minidalle2.trainer.commands.infer_command:execute"}
start_ngrok = "bin/start_ngrok.sh"
start_servers = "bin/start_servers.sh"
test = "pytest -- tests/minidalle2"
test_integration = "pytest -- tests/integration"
train_clip = {script="minidalle2.trainer.commands.train_clip_command:execute"}
train_decoder = {script="minidalle2.trainer.commands.train_decoder_command:execute"}
train_prior = {script="minidalle2.trainer.commands.train_prior_command:execute"}
update_splits = {script="minidalle2.server.commands.update_splits_command:execute"}
validate_annotations = {script="minidalle2.server.commands.validate_annotations_command:execute"}

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.run]
branch = true
source = ["minidalle2"]

[tool.coverage.report]
show_missing = true
# fail_under = 100

[tool.black]
extend-exclude = '''
/(
  # The following are specific to Black, you probably don't want those.
  | datasets
)/
'''
include = '\.py$'
line-length = 100
target-version = ['py38']

[tool.isort]
profile = "black"
src_paths = ["src", "tests"]

[tool.pyright]
include = ["src"]
